#!/usr/bin/env php
<?php

use eZ\Publish\Core\MVC\Symfony\SiteAccess;
use Psy\Configuration;
use Psy\Shell;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Debug\Debug;

define('EZSH_VERSION', 'eZ Debug Shell v0.1-dev');

/* <<< */
if (is_file(__DIR__ . '/../autoload.php')) {
    require(__DIR__ . '/../autoload.php');
} elseif (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require(__DIR__ . '/../vendor/autoload.php');
} elseif (is_file(__DIR__ . '/../../../autoload.php')) {
    require(__DIR__ . '/../../../autoload.php');
} else {
    die(
        'You must set up the Psy Shell dependencies, run the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}
/* >>> */

require_once getcwd().'/ezpublish/autoload.php';
require_once getcwd().'/ezpublish/EzPublishKernel.php';

call_user_func(function() {

    $usageException = null;

    $input = new ArgvInput();
    try {
        $input->bind(new InputDefinition(array(
            new InputOption('help', 'h', InputOption::VALUE_NONE),
            new InputOption('config', 'c', InputOption::VALUE_REQUIRED),
            new InputOption('env', 'e', InputOption::VALUE_REQUIRED),
            new InputOption('debug', 'd',InputOption::VALUE_NONE),
            new InputOption('version', 'v',  InputOption::VALUE_NONE),
            new InputOption('siteaccess', 's', InputOption::VALUE_REQUIRED),

            new InputArgument('user_login', InputArgument::OPTIONAL),
            new InputArgument('include', InputArgument::IS_ARRAY),
        )));
    } catch (\RuntimeException $e) {
        $usageException = $e;
    }

    // handle --config
    $config = array();
    if ($configFile = $input->getOption('config')) {
        $config['configFile'] = $configFile;
    }

    $environment = $input->getOption('env') ?: 'dev';
    $useDebugging = $input->getOption('debug') ?: $environment === 'dev';
    $siteAccess = $input->getOption('siteaccess');
    if ($useDebugging) {
        Debug::enable();
    }

    // handle --help
    if ($usageException !== null || $input->getOption('help')) {
        if ($usageException !== null) {
            echo $usageException->getMessage() . PHP_EOL . PHP_EOL;
        }

        $version = EZSH_VERSION;
        $name    = reset($_SERVER['argv']);
        echo <<<EOL
$version

Usage:
  $name [--siteaccess=<siteaccess_name>] [--env=<env>] [--debug] [--version] [--help] [user_login]

Options:
  --siteaccess    -s SiteAccess to use (e.g. ezdemo_site). If not provided, fallbacks to configured default SiteAccess.
  --env           -e Environment to use (defaults to "dev").
  --debug         -d Use debugging if provided. Debug is always on with "dev" environment.
  --help          -h Display this help message.
  --version       -v Display the PsySH version.
  --config        -c Use an alternate PsySH config file location.

  user_login      User login (i.e. username) to use to authenticate against the repository. If not provided, anonymous user will be used.

EOL;
        exit($usageException === null ? 0 : 1);

    }

    // handle --version
    if ($input->getOption('version')) {
        echo EZSH_VERSION . PHP_EOL;
        exit(0);
    }

    // #####
    // Now doing serious things :)
    // #####
    echo "Debugging eZ Publish using '" . ($siteAccess ?: 'default') . "' SiteAccess, in '$environment' environment." . PHP_EOL . PHP_EOL;

    $kernel = new EzPublishKernel($environment, $useDebugging);
    $kernel->loadClassCache();
    $kernel->boot();

    /** @var \Symfony\Component\DependencyInjection\ContainerInterface $container */
    $container = $kernel->getContainer();
    $container->set(
        'ezpublish.siteaccess',
        new SiteAccess($input->getOption('siteaccess') ?: $container->getParameter('ezpublish.siteaccess.default'))
    );

    // Force CLI mode for legacy stack.
    $legacyHandlerCLI = $container->get( 'ezpublish_legacy.kernel_handler.cli' );
    $container->set('ezpublish_legacy.kernel.lazy', null);
    $container->set('ezpublish_legacy.kernel_handler', $legacyHandlerCLI);
    $container->set('ezpublish_legacy.kernel_handler.web', $legacyHandlerCLI);

    $container->get('cache_clearer')->clear($kernel->getCacheDir());

    $configResolver = $container->get('ezpublish.config.resolver');
    /** @var \eZ\Publish\API\Repository\Repository $repository */
    $repository = $container->get('ezpublish.api.repository');
    $userService = $repository->getUserService();
        if ($login = $input->getArgument('user_login')) {
        $repository->setCurrentUser($userService->loadUserByLogin($login));
    }

    $psyConfig = new Configuration($config);
    // Adding presenters for eZ value objects.
    $presenterManager = $psyConfig->getPresenterManager();
    $presenterManager->addPresenter(new \Lolart\EzShell\Presenter\ValueObjectPresenter());
    $presenterManager->addPresenter(new \Lolart\EzShell\Presenter\ContentInfoPresenter());
    $presenterManager->addPresenter(new \Lolart\EzShell\Presenter\ContentPresenter($repository));

    $sh = new Shell($psyConfig);
    $sh->setScopeVariables([
        'kernel' => $kernel,
        'container' => $container,
        'configResolver' => $configResolver,
        'repository' => $repository,
        'contentService' => $repository->getContentService(),
        'contentTypeService' => $repository->getContentTypeService(),
        'locationService' => $repository->getLocationService(),
        'searchService' => $repository->getSearchService(),
        'userService' => $userService
    ]);


    // Pass additional arguments to Shell as 'includes'
    $sh->setIncludes($input->getArgument('include'));

    $sh->run();
});
