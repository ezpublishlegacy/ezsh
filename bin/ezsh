#!/usr/bin/env php
<?php

use eZ\Publish\Core\MVC\Symfony\SiteAccess;
use Psy\Shell;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Debug\Debug;

/* <<< */
if (is_file(__DIR__ . '/../autoload.php')) {
    require(__DIR__ . '/../autoload.php');
} elseif (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require(__DIR__ . '/../vendor/autoload.php');
} elseif (is_file(__DIR__ . '/../../../autoload.php')) {
    require(__DIR__ . '/../../../autoload.php');
} else {
    die(
        'You must set up the Psy Shell dependencies, run the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}
/* >>> */

require_once getcwd().'/ezpublish/autoload.php';
require_once getcwd().'/ezpublish/EzPublishKernel.php';

call_user_func(function() {

    $usageException = null;

    $input = new ArgvInput();
    try {
        $input->bind(new InputDefinition(array(
            new InputOption('env',     'e',  InputOption::VALUE_REQUIRED),
            new InputOption('debug',   null, InputOption::VALUE_NONE),
        )));
    } catch (\RuntimeException $e) {
        $usageException = $e;
    }

    // handle --env
    if (($environment = $input->getOption('config')) === null) {
        $environment = genenv('EZ_ENV') ?: 'dev';
    }

    // handle --debug
    // Depending on the USE_DEBUGGING environment variable, tells whether Symfony should be loaded with debugging.
    // If not set it is activated if in "dev" environment.
    if (($useDebugging = $input->getOption('debug')) === null) {
        if (($useDebugging = getenv('EZ_DEBUG')) === false) {
            $useDebugging = $environment === "dev";
        }
    }

    if ($useDebugging) {
        Debug::enable();
    }

    $kernel = new EzPublishKernel('dev', true);
    $kernel->loadClassCache();
    $kernel->boot();

    $container = $kernel->getContainer();
    $container->set('ezpublish.siteaccess', new SiteAccess($container->getParameter('ezpublish.siteaccess.default')));
    $legacyHandlerCLI = $container->get( 'ezpublish_legacy.kernel_handler.cli' );
    // Force CLI mode for legacy stack.
    $container->set('ezpublish_legacy.kernel.lazy', null);
    $container->set('ezpublish_legacy.kernel_handler', $legacyHandlerCLI);
    $container->set('ezpublish_legacy.kernel_handler.web', $legacyHandlerCLI);

    $container->get('cache_clearer')->clear($kernel->getCacheDir());

    $sh = new Shell();
    $sh->setScopeVariables([
        'kernel' => $kernel,
        'container' => $container,
        'configResolver' => $container->get('ezpublish.config.resolver'),
        'repository' => $container->get('ezpublish.api.repository')
    ]);
    $sh->run();
});
